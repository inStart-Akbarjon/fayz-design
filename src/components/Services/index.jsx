import { useEffect, useRef } from 'react';
import styled from 'styled-components';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

const ServicesSection = styled.section`
  min-height: 100vh;
  background-color: var(--color-secondary);
  color: #fff;
  padding: 8rem 2rem;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0) 100%);
    pointer-events: none;
  }

  @media (max-width: 768px) {
    padding: 6rem 1rem;
  }
`;

const Container = styled.div`
  max-width: 1400px;
  margin: 0 auto;
  position: relative;

  @media (max-width: 768px) {
    padding: 0 1rem;
  }
`;

const Title = styled.h2`
  font-size: clamp(2.5rem, 5vw, 4rem);
  margin-bottom: 4rem;
  text-align: center;
  opacity: 0;
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    bottom: -1rem;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 3px;
    background: var(--color-accent);
    border-radius: 2px;
  }

  @media (max-width: 768px) {
    font-size: 2.5rem;
    margin-bottom: 2rem;
  }
`;

const ServicesGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2.5rem;
  
  @media (max-width: 1200px) {
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
  }
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
`;

const ServiceCard = styled.div`
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  padding: 2.5rem;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid rgba(255,255,255,0.1);
  opacity: 0;
  transform: translateY(30px);

  &:hover {
    transform: translateY(-10px);
    background: rgba(255, 255, 255, 0.1);
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
  }

  @media (max-width: 768px) {
    padding: 1.5rem;
    transform: none;
    
    &:hover {
      transform: translateY(-5px);
    }
  }
`;

const ServiceIcon = styled.div`
  width: 60px;
  height: 60px;
  background: rgba(255,255,255,0.1);
  border-radius: 12px;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  transition: all 0.3s ease;

  ${ServiceCard}:hover & {
    background: var(--color-accent);
    transform: scale(1.1);
  }

  @media (max-width: 768px) {
    width: 50px;
    height: 50px;
    font-size: 1.2rem;
    margin-bottom: 1rem;
  }
`;

const ServiceTitle = styled.h3`
  font-size: 1.5rem;
  margin-bottom: 1rem;
  font-family: var(--font-heading);

  @media (max-width: 768px) {
    font-size: 1.3rem;
    margin-bottom: 0.8rem;
  }
`;

const ServiceDescription = styled.p`
  font-size: 1rem;
  line-height: 1.6;
  opacity: 0.8;

  @media (max-width: 768px) {
    font-size: 0.9rem;
    line-height: 1.5;
  }
`;

const ServiceTag = styled.span`
  font-size: 0.8rem;
  padding: 0.3rem 0.8rem;
  background: var(--color-accent);
  border-radius: 20px;
  margin-bottom: 1rem;
  display: inline-block;

  @media (max-width: 768px) {
    font-size: 0.7rem;
    padding: 0.3rem 0.6rem;
  }
`;

const ServiceFeatures = styled.ul`
  list-style: none;
  margin-top: 1rem;
  opacity: 0.8;
  
  li {
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    
    &:before {
      content: '‚Ä¢';
      color: var(--color-accent);
      margin-right: 0.5rem;
    }
  }

  @media (max-width: 768px) {
    margin-top: 0.8rem;
    
    li {
      font-size: 0.85rem;
      margin-bottom: 0.4rem;
    }
  }
`;

const Services = () => {
  const sectionRef = useRef(null);
  const titleRef = useRef(null);
  const cardsRef = useRef([]);

  const services = [
    {
      title: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–µ —ç—Å—Ç–µ—Ç–∏–∫—É, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏',
      icon: 'üèõÔ∏è',
      tag: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
      features: [
        '–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
        '–ê–≤—Ç–æ—Ä—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä',
        '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤'
      ]
    },
    {
      title: '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–π –¥–∏–∑–∞–π–Ω',
      description: '–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å',
      icon: 'üé®',
      tag: '–ü–æ–¥ –∫–ª—é—á',
      features: [
        '–ü–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
        '–ü–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –º–µ–±–µ–ª–∏',
        '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞',
        '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏'
      ]
    },
    {
      title: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω',
      description: '–°–æ–∑–¥–∞–µ–º –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ outdoor –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ –ø—Ä–∏—Ä–æ–¥–æ–π',
      icon: 'üå≥',
      tag: 'Eco-friendly',
      features: [
        '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—á–∞—Å—Ç–∫–∞',
        '–î–µ–Ω–¥—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç',
        '–°–∏—Å—Ç–µ–º—ã –ø–æ–ª–∏–≤–∞',
        '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ'
      ]
    },
    {
      title: '3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
      description: '–°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º',
      icon: 'üíª',
      tag: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ',
      features: [
        '–≠–∫—Å—Ç–µ—Ä—å–µ—Ä–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
        '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
        '–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
        'VR-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'
      ]
    },
    {
      title: '–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è',
      description: '–û–±–Ω–æ–≤–ª—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏',
      icon: 'üè∞',
      tag: '–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å–ª–µ–¥–∏–µ',
      features: [
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
        '–ü—Ä–æ–µ–∫—Ç —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏',
        '–£—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
        '–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ'
      ]
    },
    {
      title: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
      description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –∞—Å–ø–µ–∫—Ç–∞–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: 'üìã',
      tag: '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
      features: [
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
        '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤',
        '–ü–æ–¥–±–æ—Ä –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤',
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏'
      ]
    }
  ];

  useEffect(() => {
    if (!sectionRef.current || !titleRef.current || !cardsRef.current) return;

    const ctx = gsap.context(() => {
      gsap.fromTo(titleRef.current,
        { opacity: 0, y: 50 },
        {
          opacity: 1,
          y: 0,
          duration: 1,
          scrollTrigger: {
            trigger: titleRef.current,
            start: "top 80%",
            toggleActions: "play none none reverse"
          }
        }
      );

      cardsRef.current.forEach((card, index) => {
        if (card) {
          gsap.fromTo(card,
            { opacity: 0, y: 50 },
            {
              opacity: 1,
              y: 0,
              duration: 0.6,
              delay: index * 0.1,
              scrollTrigger: {
                trigger: card,
                start: "top 85%",
                toggleActions: "play none none reverse"
              }
            }
          );
        }
      });
    }, sectionRef);

    return () => ctx.revert();
  }, []);

  return (
    <ServicesSection ref={sectionRef} id="services">
      <Container>
        <Title ref={titleRef}>–ù–∞—à–∏ —É—Å–ª—É–≥–∏</Title>
        <ServicesGrid>
          {services.map((service, index) => (
            <ServiceCard
              key={index}
              ref={el => cardsRef.current[index] = el}
            >
              <ServiceIcon>{service.icon}</ServiceIcon>
              <ServiceTag>{service.tag}</ServiceTag>
              <ServiceTitle>{service.title}</ServiceTitle>
              <ServiceDescription>{service.description}</ServiceDescription>
              <ServiceFeatures>
                {service.features.map((feature, idx) => (
                  <li key={idx}>{feature}</li>
                ))}
              </ServiceFeatures>
            </ServiceCard>
          ))}
        </ServicesGrid>
      </Container>
    </ServicesSection>
  );
};

export default Services;